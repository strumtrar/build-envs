USER_SRC := `whoami`
USER_DEST := "str"
ARCH := env_var('ARCH')
CROSS_COMPILE := env_var('CROSS_COMPILE')
CUSTOMER := env_var('CUSTOMER')
TOOLCHAIN := env_var('TOOLCHAIN')
TOOLCHAIN_VERSION := `echo $TOOLCHAIN | cut -d- -f2 | cut -d. -f1,2`
IMAGE := "build-env-arm-multi:" + "OSELAS.Toolchain-" + TOOLCHAIN_VERSION
ROOT := env_var('PRJ_ROOT')
POD := env_var('PODMAN')
PODFLAGS := env_var('PODMANFLAGS')
PROJ := `if [[ -e .kernel ]]; then echo kernel; else echo barebox; fi`
HOOKS := "$PRJ_ROOT/justfiles/just-hooks"

alias b := build
alias c := compile
alias r := rsync

cmd := 'bash -i'

default: compile

@build:
    {{POD}} build -q -t {{IMAGE}} --build-arg=TOOLCHAIN={{TOOLCHAIN}} {{ROOT}}/build-envs/arm-multi

_create-builddir:
    #!/usr/bin/env bash
    PWD="{{invocation_directory()}}"
    BRANCH=`cd $PWD && git symbolic-ref --short HEAD`
    if [[ $BRANCH == "" ]]; then
      echo "Please checkout a working branch first"
      exit 1
    fi
    BUILDDIR="/home/{{USER_SRC}}/work/build/$BRANCH"
    cd $PWD
    if [ ! -L build ]; then
        echo "Creating $BUILDDIR"
        mkdir -p $BUILDDIR
        echo "Creating $BUILDDIR link"
        ln -sf $BUILDDIR build
    fi    

_saveconfig: _create-builddir
    #!/usr/bin/env bash
    PWD="{{invocation_directory()}}"
    cd $PWD
    if [[ ! -e build ]]; then
        exit 0
    fi
    if [[ ! -e build/.config ]]; then
        exit 0
    fi

    HASH=$(echo $(git describe --always))
    HASH=`echo $HASH | tr '[/]' '[_]'`

    if [[ $PWD =~ .*kernel*. ]]; then 
        cp build/.config {{ROOT}}/configs/kernelconfig-$HASH
        cd {{ROOT}}
        if [[ `git status --porcelain -- configs` ]]; then
                git add configs
        	git commit -m "configs: update kernelconfig `date`"
        fi
    elif [[ $PWD =~ .*barebox*. ]]; then
        cp build/.config {{ROOT}}/configs/bareboxconfig-$HASH
        cd {{ROOT}}
        if [[ `git status --porcelain -- configs` ]]; then
            git add configs
            git commit -m "configs: update bareboxconfig `date`"
        fi
    fi

@_connect flags="--rm" *command=cmd: build _create-builddir
    cd {{invocation_directory()}} && \
    {{POD}} run {{flags}} -it \
    {{PODFLAGS}} \
    -e ARCH=$ARCH \
    -e CROSS_COMPILE=$CROSS_COMPILE \
    --workdir /{{ PROJ }} \
    --volume "$(pwd)"/build:/build \
    --volume "$(pwd)":/{{ PROJ }} \
    --net=host \
    {{IMAGE}} \
    {{command}}

@connect *command=cmd:
    cd {{invocation_directory()}} && \
    just _connect --rm {{command}}

@objdump *parameters:
    cd {{invocation_directory()}} && \
    just connect ${CROSS_COMPILE}objdump -D {{parameters}}

pre-hook:
    #!/usr/bin/env bash
    PWD="{{invocation_directory()}}"
    if [[ $PWD =~ .*kernel*. ]]; then
        just -f $PRJ_ROOT/justfiles/just-hooks pre-kernel
    elif [[ $PWD =~ .*barebox*. ]]; then
        just -f $PRJ_ROOT/justfiles/just-hooks pre-barebox
    fi

post-hook:
    #!/usr/bin/env bash
    PWD="{{invocation_directory()}}"
    if [[ $PWD =~ .*kernel*. ]]; then
        just -f {{HOOKS}} post-kernel
    elif [[ $PWD =~ .*barebox*. ]]; then
        just -f {{HOOKS}} post-barebox
    fi

compile target="container" *parameters="": pre-hook && _saveconfig post-hook
    #!/usr/bin/env bash
    PWD="{{invocation_directory()}}"
    cd $PWD
    if [[ {{target}} =~ .*container*. ]]; then
        just connect make O=/build -j$(nproc) {{parameters}}
        just connect make O=/build -j$(nproc) compile_commands.json
    else
        ARCH={{ARCH}} CROSS_COMPILE={{CROSS_COMPILE}} make O=build -j$(nproc) {{parameters}}
        ARCH={{ARCH}} CROSS_COMPILE={{CROSS_COMPILE}} make O=build -j$(nproc) compile_commands.json
    fi

copy: (compile "host")
    #!/usr/bin/env bash
    PWD="{{invocation_directory()}}"
    if [[ $PWD =~ .*kernel*. ]]; then
        rsync -avz {{invocation_directory()}}/build/$KERNELIMAGE /tftpboot/{{USER_DEST}}-linux-$HOSTNAME
        if [[ ! -z $DEVICETREE ]]; then
            rsync -avz {{invocation_directory()}}/build/$DEVICETREE /tftpboot/{{USER_DEST}}-oftree-$HOSTNAME
        fi
    elif [[ $PWD =~ .*barebox*. ]]; then
        rsync -avz {{invocation_directory()}}/build/$BAREBOXIMAGE /tftpboot/{{USER_DEST}}-barebox-$HOSTNAME
        if [ -e {{invocation_directory()}}/build/$XLOADIMAGE ]; then
            rsync -avz {{invocation_directory()}}/build/$XLOADIMAGE /tftpboot/{{USER_DEST}}-xload-$HOSTNAME
        fi
    fi

@dtcheck *parameters:
    cd {{invocation_directory()}} && \
    just connect make O=/build -j$(nproc) dt_binding_check DT_SCHEMA_FILES={{parameters}}
    just connect make O=/build -j$(nproc) dtbs_check DT_SCHEMA_FILES={{parameters}}

rsync: compile
    #!/usr/bin/env bash
    PWD="{{invocation_directory()}}"
    if [[ $MODE == "local" ]]; then
        REMOTE=""
    else
        REMOTE="$LG_PROXY:"
    fi
    if [[ $PWD =~ .*kernel*. ]]; then
        rsync -avz {{invocation_directory()}}/build/$KERNELIMAGE $REMOTE/tftpboot/{{USER_DEST}}-linux-$HOSTNAME && \
        if [[ ! -z $DEVICETREE ]]; then
            rsync -avz {{invocation_directory()}}/build/$DEVICETREE $REMOTE/tftpboot/{{USER_DEST}}-oftree-$HOSTNAME
        fi
    elif [[ $PWD =~ .*barebox*. ]]; then
        rsync -avz {{invocation_directory()}}/build/$BAREBOXIMAGE $REMOTE/tftpboot/{{USER_DEST}}-barebox-$HOSTNAME
        rsync -avz {{invocation_directory()}}/bosch_be/boot.bin $REMOTE/tftpboot/{{USER_DEST}}-bootbin-$HOSTNAME
    fi
