USER_SRC := `whoami`
USER_DEST := "str"
TOOLCHAIN := env_var('TOOLCHAIN')
TOOLCHAIN_VERSION := `echo $TOOLCHAIN | cut -d- -f2 | cut -d. -f1,2`
IMAGE := "build-env-arm-multi:" + "OSELAS.Toolchain-" + TOOLCHAIN_VERSION
ROOT := env_var('ROOT')

alias b := build
alias c := compile
alias r := rsync
alias t := test

PROJ := `if [[ -e .kernel ]]; then echo kernel; else echo barebox; fi`

cmd := 'bash -i'

default: compile

@build:
    podman build -q -t {{IMAGE}} --build-arg=TOOLCHAIN={{TOOLCHAIN}} {{ROOT}}/build-envs/arm-multi

ps:
    podman ps --all --storage

_con:
    labgrid-client con --logfile {{ROOT}}/logs/`date +"%Y_%m_%d_%I_%M"`.log

_lock:
    #!/usr/bin/env bash
    set -x
    if [[ -n $LG_PLACE ]]; then
        labgrid-client who | grep $LG_PLACE
        if [ $? != 0 ]; then
            labgrid-client lock
        fi
    fi

_saveconfig:
    #!/usr/bin/env bash
    PWD="{{invocation_directory()}}"
    cd $PWD
    if [[ $PWD =~ .*kernel*. ]]; then 
        cp build/.config {{ROOT}}/configs/kernelconfig
    elif [[ $PWD =~ .*barebox*. ]]; then
        cp build/.config {{ROOT}}/configs/bareboxconfig
    fi

_unlock:
    labgrid-client unlock

_pw +dir="on":
    labgrid-client pw {{dir}}

_pwcyc:
    labgrid-client pw cycle

_create-builddir:
    #!/usr/bin/env bash
    PWD="{{invocation_directory()}}"
    BRANCH=`cd $PWD && git symbolic-ref --short HEAD`
    BUILDDIR="/home/{{USER_SRC}}/work/build/$BRANCH"
    cd $PWD
    if [ ! -L build ]; then
        echo "Creating $BUILDDIR"
        mkdir -p $BUILDDIR
        echo "Creating $BUILDDIR link"
        ln -sf $BUILDDIR build
    fi    

@_connect *command=cmd: build _create-builddir
    cd {{invocation_directory()}} && \
    podman run --rm -it --userns=keep-id \
    -e ARCH=$ARCH \
    -e CROSS_COMPILE=$CROSS_COMPILE \
    -e CC="ccache gcc" \
    --workdir /{{ PROJ }} \
    --volume "$(pwd)"/build:/build \
    --volume "$(pwd)":/{{ PROJ }} \
    {{IMAGE}} \
    {{command}}

@connect *command=cmd:
    cd {{invocation_directory()}} && \
    just _connect {{command}}

@objdump *parameters:
    cd {{invocation_directory()}} && \
    just connect ${CROSS_COMPILE}objdump -D {{parameters}}

@compile *parameters: (_saveconfig)
    cd {{invocation_directory()}} && \
    just connect make O=/build -j$(nproc) {{parameters}}
    just connect make O=/build -j$(nproc) compile_commands.json

rsync: compile
    #!/usr/bin/env bash
    PWD="{{invocation_directory()}}"
    if [[ $PWD =~ .*kernel*. ]]; then
        rsync -avz {{invocation_directory()}}/build/$KERNELIMAGE $LG_PROXY:/tftpboot/{{USER_DEST}}-linux-$HOSTNAME && \
        if [[ ! -z $DEVICETREE ]]; then
            rsync -avz {{invocation_directory()}}/build/$DEVICETREE $LG_PROXY:/tftpboot/{{USER_DEST}}-oftree-$HOSTNAME
        fi
    elif [[ $PWD =~ .*barebox*. ]]; then
        rsync -avz {{invocation_directory()}}/build/$BAREBOXIMAGE $LG_PROXY:/tftpboot/{{USER_DEST}}-barebox-$HOSTNAME
        if [ -e {{invocation_directory()}}/build/$XLOADIMAGE ]; then
            rsync -avz {{invocation_directory()}}/build/$XLOADIMAGE $LG_PROXY:/tftpboot/{{USER_DEST}}-xload-$HOSTNAME
        fi
    fi

restart: rsync _pwcyc

test: rsync _lock _pw _con && (_pw "off") _unlock

lg: _lock _pw _con && (_pw "off") _unlock
