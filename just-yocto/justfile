USER_SRC := `whoami`
USER_DEST := "smull"
IMAGE := "yocto-build-env:latest"
MACHINE := `echo $MACHINE`
ROOT := env_var('ROOT')
alias b := build
alias c := compile-bsp

cmd := 'bash -i'

@build:
    podman build -q -t {{IMAGE}} {{ROOT}}/build-envs/yocto-build-env

ps:
    podman ps --all --storage

_connect machine *command=cmd: build
    cd {{invocation_directory()}} && \
    podman run -it --rm --userns=keep-id \
    -e MACHINE={{machine}} \
    --workdir /bsp \
    --volume "$(pwd)":/bsp \
    --volume ~/repos:/repos \
    --volume ~/work/yocto/dl-dir:/bsp/build/downloads \
    --volume ~/work/yocto/sstate-cache:/bsp/build/sstate-cache \
    {{IMAGE}} \
    {{command}}

_init_build_script:
    #!/usr/bin/env bash
    PWD="{{invocation_directory()}}"
    BUILD_SCRIPT="build-{{MACHINE}}.sh"
    cd $PWD
    if [ ! -d build ]; then
        mkdir build
    fi
    if [ ! -f $BUILD_SCRIPT ]; then
        echo "#!/bin/bash" > $BUILD_SCRIPT
        echo ". ./oe-init-build-env build" >> $BUILD_SCRIPT
        echo "bitbake \$@" >> $BUILD_SCRIPT
        chmod +x $BUILD_SCRIPT
        if [ ! -d build/conf ]; then
            mkdir -p build/conf
        fi
        if [ ! -e build/conf/auto.conf ]; then
            echo "BB_FETCH_PREMIRRORONLY = \"0\"" > build/conf/auto.conf
            echo "BB_NO_NETWORK = \"0\"" >> build/conf/auto.conf
            echo "BB_ALLOWED_NETWORKS = \"\"" >> build/conf/auto.conf
            if [ -e $PWD/../.auto.conf ]; then
                cat $PWD/../.auto.conf >> build/conf/auto.conf
            fi
        fi
    fi

_init_devtool_script:
    #!/usr/bin/env bash
    PWD="{{invocation_directory()}}"
    DEVTOOL_SCRIPT="devtool-{{MACHINE}}.sh"
    cd $PWD
    if [ ! -f $DEVTOOL_SCRIPT ]; then
        echo "#!/bin/bash" > $DEVTOOL_SCRIPT
        echo ". ./oe-init-build-env build" >> $DEVTOOL_SCRIPT
        echo "devtool \$@" >> $DEVTOOL_SCRIPT
        chmod +x $DEVTOOL_SCRIPT
    fi

_init_wic_script:
    #!/usr/bin/env bash
    PWD="{{invocation_directory()}}"
    WIC_SCRIPT="wic-{{MACHINE}}.sh"
    cd $PWD
    if [ ! -f $WIC_SCRIPT ]; then
        echo "#!/bin/bash" > $WIC_SCRIPT
        echo ". ./oe-init-build-env build" >> $WIC_SCRIPT
        echo "wic \$@" >> $WIC_SCRIPT
        chmod +x $WIC_SCRIPT
    fi

compile-bsp +target: _init_build_script
    cd {{invocation_directory()}} && \
    just _connect {{MACHINE}} /bsp/build-{{MACHINE}}.sh {{target}}
    notify-send -i ~/cfg/x/builder.png "{{MACHINE}} :: {{target}} done"

devtool +target: _init_devtool_script
    cd {{invocation_directory()}} && \
    just _connect {{MACHINE}} /bsp/devtool-{{MACHINE}}.sh {{target}}

wic +target: _init_wic_script
    cd {{invocation_directory()}} && \
    just _connect {{MACHINE}} /bsp/wic-{{MACHINE}}.sh {{target}}

rsync:
    #!/usr/bin/env bash
    PWD="{{invocation_directory()}}"
    rsync -avz {{invocation_directory()}}/build/tmp/deploy/images/ppm4/BOOT.BIN /srv/tftp/{{USER_DEST}}-bootbin-$HOSTNAME
    rsync -vz --copy-links {{invocation_directory()}}/build/tmp/deploy/images/ppm4/msd-base-image-ppm4.wic.gz /srv/tftp/{{USER_DEST}}-wic-$HOSTNAME
