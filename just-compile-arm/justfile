TAG := "latest"
USER_SRC := `whoami`
USER_DEST := "str"
ARCH := env_var('ARCH')
CROSS_COMPILE := env_var_or_default('CROSS_COMPILE', "")
CUSTOMER := env_var('CUSTOMER')
PODMAN_CACHE := env_var('PODMAN_CACHE')
ROOT := env_var('PRJ_ROOT')
POD := env_var('PODMAN')
PODFLAGS := env_var('PODMANFLAGS')
PROJ := `if [[ -e .kernel ]]; then echo kernel; else echo barebox; fi`
CONFIG := ROOT + "/build-envs/just-common/just-config"
HOOKS := "$PRJ_ROOT/justfiles/just-hooks"

alias b := build
alias c := compile
alias r := rsync

cmd := 'bash -i'

default: 
    @just --choose

###
### Podman calls
###

@pull:
    {{POD}} pull -q ghcr.io/strumtrar/{{PODMAN_CACHE}}:{{TAG}}

@build:
    {{POD}} build -q -t ghcr.io/strumtrar/{{PODMAN_CACHE}}:{{TAG}} --layers --build-arg=TOOLCHAIN=$TOOLCHAIN --cache-from ghcr.io/strumtrar/{{PODMAN_CACHE}} {{ROOT}}/build-envs/$DOCKERFILES

###
### Hooks
###

@config-hook:
    just -f {{CONFIG}} _saveconfig 

@builddir-hook:
    just -f {{CONFIG}} _create-builddir

pre-compile-hook:
    #!/usr/bin/env bash
    PWD="{{invocation_directory()}}"
    if [[ $PWD =~ .*kernel*. ]]; then
        just -f {{HOOKS}} pre-kernel
    elif [[ $PWD =~ .*barebox*. ]]; then
        just -f {{HOOKS}} pre-barebox
    fi

post-compile-hook:
    #!/usr/bin/env bash
    PWD="{{invocation_directory()}}"
    if [[ $PWD =~ .*kernel*. ]]; then
        just -f {{HOOKS}} post-kernel
    elif [[ $PWD =~ .*barebox*. ]]; then
        just -f {{HOOKS}} post-barebox
    fi

@post-rsync-hook:
    just -f {{HOOKS}} post-rsync


@_connect flags="--rm" *command=cmd: build builddir-hook
    cd {{invocation_directory()}} && \
    {{POD}} run {{flags}} -it \
    {{PODFLAGS}} \
    -e ARCH=$ARCH \
    -e CROSS_COMPILE=$CROSS_COMPILE \
    --workdir /{{ PROJ }} \
    --volume "$(pwd)"/build:/build \
    --volume "$(pwd)":/{{ PROJ }} \
    --net=host \
    {{PODMAN_CACHE}}:{{TAG}} \
    {{command}}

@connect *command=cmd:
    cd {{invocation_directory()}} && \
    just _connect --rm {{command}}

@objdump *parameters:
    cd {{invocation_directory()}} && \
    just connect ${CROSS_COMPILE}objdump -D {{parameters}}

compile target="container" *parameters="": pre-compile-hook && config-hook post-compile-hook
    #!/usr/bin/env bash
    PWD="{{invocation_directory()}}"
    cd $PWD
    if [[ {{target}} =~ .*container*. ]]; then
        just connect make O=/build -j$(nproc) {{parameters}} && \
                     make O=/build -j$(nproc) compile_commands.json
    else
        ARCH={{ARCH}} CROSS_COMPILE={{CROSS_COMPILE}} \
                make O=build -j$(nproc) {{parameters}} && \
                make O=build -j$(nproc) compile_commands.json
    fi
    notify-send -i ~/cfg/x/builder.png "Compilation done"

@dtcheck *parameters:
    cd {{invocation_directory()}} && \
    just connect make O=/build -j$(nproc) dt_binding_check DT_SCHEMA_FILES={{parameters}} && \
                 make O=/build -j$(nproc) dtbs_check DT_SCHEMA_FILES={{parameters}}

rsync: compile && post-rsync-hook
    #!/usr/bin/env bash
    PWD="{{invocation_directory()}}"

    if [[ $MODE == "local" ]]; then
        REMOTE=""
    else
        REMOTE="$LG_PROXY:"
    fi
    if [[ $PWD =~ .*kernel*. ]]; then
        rsync -az {{invocation_directory()}}/build/$KERNELIMAGE $REMOTE/tftpboot/{{USER_DEST}}-linux-$HOSTNAME && \
        notify-send -i ~/cfg/x/bomber.png "Sent $REMOTE:{{USER_DEST}}-linux-$HOSTNAME!"
        if [[ ! -z $DEVICETREE && ! -d $DEVICETREE ]]; then
            rsync -az {{invocation_directory()}}/build/$DEVICETREE $REMOTE/tftpboot/{{USER_DEST}}-oftree-$HOSTNAME
            notify-send -i ~/cfg/x/bomber.png "Sent $REMOTE:{{USER_DEST}}-oftree-$HOSTNAME!"
        fi
    elif [[ $PWD =~ .*barebox*. ]]; then
        if [ -f {{invocation_directory()}}/build/$BAREBOXIMAGE ]; then
            rsync -avz {{invocation_directory()}}/build/$BAREBOXIMAGE $REMOTE/tftpboot/{{USER_DEST}}-barebox-$HOSTNAME
            notify-send -i ~/cfg/x/bomber.png "Sent $REMOTE:{{USER_DEST}}-barebox-$HOSTNAME!"
        fi
        if [ -f {{invocation_directory()}}/build/$XLOADIMAGE ]; then
            rsync -avz {{invocation_directory()}}/build/$XLOADIMAGE $REMOTE/tftpboot/{{USER_DEST}}-xload-$HOSTNAME
            notify-send -i ~/cfg/x/bomber.png "Sent $REMOTE:{{USER_DEST}}-xload-$HOSTNAME!"
        fi
    fi
